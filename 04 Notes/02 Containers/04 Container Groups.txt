Azure Container Groups:

	-	A container group is collection of containers that get scheduled on same host machine.
	-	The containers in a container group share a lifecycle, resources, local network, 
		and storage volumes.
	- 	It's similar concept to a pod in Kubernetes.
	- 	Multi-container groups currently support only Linux containers.
	- 	For Windows containers, Azure Container Instances only supports deployment 
		of a single container instance.

Common scenarios:

	Multiple-container groups are useful in cases where you want to divide a single
	functional task into a small number of container images.
	These images can then be delivered by different teams and having seperate resource 
	requirements.
	
Examples/usecases:
	
	1.	A container serving a web application and a container pulling the latest content
		from source control.
	2.	An application container and a logging container.
		The logging conatiner collects the logs and metrics output by the main
		application and writes them to long-term storage.
	3.	An application container and a monitoring container.
		The monitoring container periodically makes a request to the application
		to ensure that it's running and responding correctly and raises an alert
		if it's not.
	4.	A front-end container and a back-end container. The front end might serve
		a web application, with the back end running a service to retrieve data.
		
/**************************************/		
/**************** LABS ****************/
/**************************************/


1 - Azure MYSQL connected to local app.
2 - MySQL containerization(existing) in Azure and accessing through Workbench on your local machine.
3 - MySQL custom containerization and verify data, run queries etc.,
4 - Access it through local application
5 - Register in ACR and access through ACI from your local machine.
6 - Local application image accessing MySQL image.

LAB 01: Connect your web application locally to the MySQL DB on Azure Cloud.

	1.Create web app in your local machine.
	2.Install MySQL.Data NuGet package.
	3.Implement ado.net changes for MySQL in the application.
	4.Create Azure database for MySQL in the Azure portal.
	6.Once successfully created connection security --> add client IP address to the firewall rules.
	7.ConnectionStrings --> Copy and update the string to the application.

	8.Go to MySQL workbench --> add server name, user and pwd. 
	9.Run the script to create DB, table and insert data.
	10. Run the application locally to verify data displaying from MySQL DB
	
LAB 02: Create MySQL DB conatiner and connect through MySQL Workbench

	Create Linux VM.
	
	Install docker image on the VM.
	Ref: https://docs.docker.com/engine/install/ubuntu/

	Download MySQL image and run as container from dockerhub using command
	sudo docker run --name=mysql-instance -p 3306:3306 --restart on-failure -d -e MYSQL_ROOT_
	PASSWORD=<<mysql password>> mysql

	/*** For learning command - nonsecure ***/ 
	> sudo docker exec -it mysql-instance /bin/bash
	> -u root -p	
		(or)
	/*** Real time command ***/	
	> sudo docker exec -it <<container name>> mysql -u root -p
	
	> Enter password:

	mysql> show database;

	Open MySQL Workbench and connect to MySQL DB engine in the container.

LAB 03:

	Create Newfolder and place the script for create table and insert values.
	Create docker file.

		FROM mysql as base
		ENV MYSQL_ROOT_PASSWORD=Azure123
		ENV MYSQL_DATABASE=appdb

		COPY <<script file name>>.sql /docker-entrypoint-initdb.d/

	Copy scirpt and docker file to server.

	Ruild the docker file and create image
	Run the custom docker image to containerize.

	open an interactive shell on the new sql container
	sudo docker exec -it <<conatiner name>> mysql -u root -p
	Enter password:

	mysql> show databses;
	mysql> use <<db name>>;
	mysql> show tables;
	mysql> select * from <<table name>>;

LAB 04:

	Go to the application on your local machine and modify connection string to 
	connect with MySQL Container DB

	Server=<<Public IP address of VM>>
	Uid = <<root>>
	Pwd = <<MySQL password on the container>>
	Database = <<Database Name>>

	Enable 3306 port on the VM machine.
	Run the application locally.

LAB 05: Deploy conatiner to ACR

	Log-in to Azure Container Registry (ACR)
	> sudo docker login <<ACR login server>> 
	Tag and Push custom mysql image to ACR.

	sudo docker tag <<imagename>> <<ACR login server>>/<<Image name>>
	sudo docker push <<ACR login server>>/<<Image name>>

	Create Azure Container Instances
	Image source --> Azure Container Registry.
	Port --> 3306

	Copy public IP address of the ACI and replace it in the connection string of local
	application and run the application.

	Access DB and query from ACI console.

LAB 06: Deploy Azure Container group

	Go to local application (web app) and update connection string server value with 'localhost'.
	* Azure containers group (web app + DB) run on the same host machine (VM) in this case.
	Publish the web application to local folder.
	Copy files along with publish folder to linux server with the help of WinSCP and build docker image with Dockerfile.
	After creating the image successfully, tag the image using command

		sudo docker tag <<imagename>> <<ACR login server>>/<<Image name>>
		
	As a next step, push the image to the Container Repository using command
	
		sudo docker push <<ACR login server>>/<<Image name>>
	
	While pushing image to the conatiner repository it may give an authentication error.
	To overcome the authentication error, you have to log-in to Azure Container Repository using command
		
		sudo docker login <<ACR login server>>
	
	Create YAML file to group container instances. (Refer resources folder for yaml file and make the required changes)

	Open Azure Cloud shell. 
	Open advanced settings for current subscription and use existing resource group, new storage account and file share values before clicking on 'Create storage'.
	Upload yaml file.
	Type the below azure command to run the yaml file.
	
		az conatiner create --resource-group <<resource group name>> --file <<yaml file name>>
	
	This will create Container Instance with the container group name mentioned in the yaml file, which can be verified by navigating to 'Container Instances'.

























 




